#!/usr/bin/perl -w
BEGIN
{
    `apt -y install pen`;
}

$::copyright_lic="Generated by ULB Ultra Load Balancer (c) L.BARDI 2024 under GPLv3";
die($^O) if ($^O !~ /linux/i);
use strict;
no warnings 'uninitialized';


use lib './';
use Getopt::Std;
use Std;


@::FILES_DISTRIB_BIN=("create_farm.pl","install_ulb.pl","kill_all_farm.pl","launch_all_farm.pl");
@::FILES_DISTRIB_LIB=("ULB.pm","Std.pm");


$::NOM_PROGRAMME = $0;
$::REVISION = 'v1.00';


sub menu_help
{	
	Std::println("");
	Std::println(" $::NOM_PROGRAMME $::REVISION usage :");
	Std::println(" $::NOM_PROGRAMME -h");
	Std::println(" => help");
	Std::println(" $::NOM_PROGRAMME -p path -i interface_name -a real_ip_for_carp -b virtual_ip_for_carp -n vhid [-m] ");
	Std::println(" => install ULB ");
	Std::println(" => 			-p path : where to install");	
    Std::println(" => 			-i interface_name name of the interface that will received carp process");	
    Std::println(" => 			-a real ip ");	
    Std::println(" => 			-b virtual ip ");	
    Std::println(" => 			-m if present will be the ucarp master");	
	Std::println(" => 			-n vhid identifier [1..255]");	
    Std::println(" => 	master example $::NOM_PROGRAMME -p /usr/local/ULB -i ens19 -a 10.56.64.18 -b 10.56.65.8 -n 8-m ");	
    Std::println(" => 	slave example $::NOM_PROGRAMME -p /usr/local/ULB -i ens19 -a 10.56.64.19 -b 10.56.65.8  -n 8 ");	
}
sub process_args
{
	my %opts;
	my $arga = (!(@ARGV));
	getopts('hp:i:a:b:n:m', \%opts);
	if (($opts{'h'} eq 1) or  $arga)
	{
		  menu_help;
		  exit;
	}
	return %opts;
}

#
# Main
#
my %opts = process_args();

if (!$opts{'p'})
{
	Std::println('--- missing path where to install');
	die(1);
}
if (!$opts{'i'})
{
	Std::println('--- missing interface for ucarp');
	die(1);
}
if (!$opts{'a'})
{
	Std::println('--- missing real ip for carp interface');
	die(1);
}
if (!$opts{'b'})
{
	Std::println('--- missing virtual ip for carp interface');
	die(1);
}
if (!$opts{'n'})
{
	Std::println('--- missing vhid');
	die(1);
}
my $if=$opts{'i'};
my $rip=$opts{'a'};
my $vip=$opts{'b'};
my $path=$opts{'p'};
my $vhid=$opts{'n'};
Std::mexec("mkdir -p $path/etc $path/var $path/bin $path/sbin $path/lib");
Std::println("Generating ULB lib from path");
my $ULB_file_name = "ULB.pm";
my $ULB_file_text = "# $::copyright_lic
package ULB;
# Title: ULB.pm
# package: paquetage ULB (ultra load balancer)
use strict;
no warnings 'uninitialized';
use base 'Exporter';
our \@EXPORT = qw(
				);
".'                
$::copyright_lic="Generated by ULB Ultra Load Balancer (c) L.BARDI 2024 under GPLv3";
$::if_ULB="'.$if.'";
$::base_ULB="'.$path.'";
$::ULB_etc="$::base_ULB/etc";
$::ULB_var="$::base_ULB/var";
$::ULB_bin="$::base_ULB/bin";
$::ULB_sbin="$::base_ULB/sbin";
$::ULB_lib="$::base_ULB/lib";
$::port_ctrl_run=20000;
$::PEN = "/usr/bin/pen";
$::PENCTL = "/usr/bin/penctl";
1;';
Std::mexec("rm -rf $ULB_file_name");
Std::writefile($ULB_file_name,($ULB_file_text));
my $text_if  ="#$::copyright_lic
auto $if
iface $if inet static  
 	address $rip
 	netmask 255.255.255.255  
ucarp-vid $vhid 
ucarp-vip $vip
ucarp-password  totolitoto 
ucarp-upscript  $path/bin/start_ulb.sh
ucarp-downscript $path/bin/stop_ulb.sh
ucarp-xparam -M  
#".Std::genere_password(15)."
# priority - lower is better  
ucarp-advskew 10 ";
if ($opts{'m'})
{
	$text_if .="
# Should only be set on one server  
ucarp-master yes
# How often, in seconds, the hosts should try to communicate with each other  
ucarp-advbase 1
" ;
}
else
{
	$text_if .="
# Should only be set on one server  
ucarp-master no
# How often, in seconds, the hosts should try to communicate with each other  
ucarp-advbase 2
" ;
}
$text_if .="
iface $if:ucarp inet static  
    address $vip
    netmask 255.255.255.255
";
Std::println("Generating interface file");
Std::mexec("rm -rf /etc/network/interfaces.d/ucarp_$if");
Std::writefile("/etc/network/interfaces.d/ucarp_$if",($text_if));
Std::println("Copying Files into $path");
foreach my $f (@::FILES_DISTRIB_BIN)
{
    Std::mexec("/bin/cp $f $path/sbin/. ; /bin/chmod 750 $path/sbin/* ;/bin/chown root:root $path/sbin/*");
}
foreach my $f (@::FILES_DISTRIB_LIB)
{
    Std::mexec("/bin/cp $f $path/lib/. ; /bin/chmod 750 $path/lib/* ;/bin/chown root:root $path/lib/*");
}
# write wrapper for startup scripts

my $add_addr = "/sbin/ip addr add $vip/32 dev $if:ucarp";
Std::writefile("$path/bin/start_ulb.sh",("#!/bin/bash\n#$::copyright_lic\ncd /usr/local/ulb/sbin\n$add_addr\nperl launch_all_farm.pl\n"));
Std::mexec("/bin/chmod 750 $path/bin/start_ulb.sh ");
my $del_addr = "/sbin/ip addr del $vip/32 dev $if:ucarp";
Std::writefile("$path/bin/stop_ulb.sh",("#!/bin/bash\n#$::copyright_lic\ncd /usr/local/ulb/sbin\nperl kill_all_farm.pl\n$del_addr\n"));
Std::mexec("/bin/chmod 750 $path/bin/stop_ulb.sh  ");
Std::println("End install, now you need to generate a farm");




